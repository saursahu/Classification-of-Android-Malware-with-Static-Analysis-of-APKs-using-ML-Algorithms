# -*- coding: utf-8 -*-
"""
Created on Sun Oct 20 23:02:10 2019

@author: praty
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('./saurabh_dataset.csv')
dataset= dataset.dropna()

X = dataset.iloc[:, 0:24].values
X = X.astype('int64')
y = dataset.iloc[:, 27].values
y = y.astype('int64')
y = y.reshape(y.shape[0], 1)
# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 42)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Fitting Decision tree Classification to the Training set
from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier()
classifier.fit(X_train, y_train)

acc_decision_tree = round(classifier.score(X_train, y_train) * 100, 2)
print('Accuracy: %.2f' % (acc_decision_tree))

# Predicting the Test set results
y_pred = classifier.predict(X_test)
predictions = classifier.predict(X_train)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

# 10-fold cross validation
from sklearn.model_selection import cross_val_score
scores = cross_val_score(classifier, X_train, y_train, cv=10, scoring = "accuracy")
print("Scores:", scores)
print("Mean:", np.round(scores.mean(),8))
print("Standard Deviation:", np.round(scores.std(),8))

# precision, recall and f1 score
from sklearn.metrics import precision_score, recall_score, f1_score
print("Precision:", precision_score(y_train, predictions))
print("Recall:",recall_score(y_train, predictions))
print("F1 score:",f1_score(y_train, predictions))

# precision-recall curve
from sklearn.metrics import precision_recall_curve
y_scores = classifier.predict_proba(X_train)
y_scores = y_scores[:,1]

precision, recall, threshold = precision_recall_curve(y_train, y_scores)

svm_precision=[]
svm_recall=[]
svm_threshold=[]
knn_precision=[]
knn_recall=[]
knn_threshold=[]
random_precision=[]
random_recall=[]
random_threshold=[]

with open('svm_precision.txt','r') as filehandle:
    for line in filehandle:
        currentPlace=line[:-1]
        svm_precision.append(float(currentPlace))

with open('svm_recall.txt','r') as filehandle:
    for line in filehandle:
        currentPlace=line[:-1]
        svm_recall.append(float(currentPlace))
        
with open('svm_threshold.txt','r') as filehandle:
    for line in filehandle:
        currentPlace=line[:-1]
        svm_threshold.append(float(currentPlace))
        
with open('knn_precision.txt','r') as filehandle:
    for line in filehandle:
        currentPlace=line[:-1]
        knn_precision.append(float(currentPlace))
        
with open('knn_threshold.txt','r') as filehandle:
    for line in filehandle:
        currentPlace=line[:-1]
        knn_threshold.append(float(currentPlace))
        
with open('knn_recall.txt','r') as filehandle:
    for line in filehandle:
        currentPlace=line[:-1]
        knn_recall.append(float(currentPlace))
        
with open('random_precision.txt','r') as filehandle:
    for line in filehandle:
        currentPlace=line[:-1]
        random_precision.append(float(currentPlace))
        
with open('random_recall.txt','r') as filehandle:
    for line in filehandle:
        currentPlace=line[:-1]
        random_recall.append(float(currentPlace))
        
with open('random_threshold.txt','r') as filehandle:
    for line in filehandle:
        currentPlace=line[:-1]
        random_threshold.append(float(currentPlace))
    

def plot_precision_and_recall(precision, recall, threshold, svm_precision, svm_recall, svm_threshold, knn_precision, knn_recall, knn_threshold, random_precision, random_recall, random_threshold):
    plt.plot(threshold, precision[:-1], "r", label="decision tree", linewidth=5)
    plt.plot(threshold, recall[:-1], "r", linewidth=5)
    plt.plot(svm_threshold, svm_precision[:-1], 'y',label="svm", linewidth=5)
    plt.plot(svm_threshold, svm_recall[:-1], "y", linewidth=5)
    plt.plot(knn_threshold, knn_precision[:-1], 'b',label="knn", linewidth=5)
    plt.plot(knn_threshold, knn_recall[:-1], "b", linewidth=5)
    plt.plot(random_threshold, random_precision[:-1], 'g',label="random", linewidth=5)
    plt.plot(random_threshold, random_recall[:-1], 'g', linewidth=5)
    plt.xlabel("threshold", fontsize=19)
    plt.legend()
    plt.ylim([0, 1])

plt.figure(figsize=(14, 7))
plot_precision_and_recall(precision, recall, threshold, svm_precision, svm_recall, svm_threshold, knn_precision, knn_recall, knn_threshold, random_precision, random_recall, random_threshold)
plt.show()


# roc_curve
from sklearn.metrics import roc_curve
false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, y_scores)

false_svm=[]
true_svm=[]
false_random=[]
true_random=[]
false_knn=[]
true_knn=[]

with open('svm_true.txt','r') as filehandle1:
    for line1 in filehandle1:
        currentPlace1=line1[:-1]
        true_svm.append(currentPlace1)
        
with open('svm_false.txt', 'r') as filehandle2:
    for line2 in filehandle2:
        currentPlace2=line2[:-1]
        false_svm.append(currentPlace2)
        
with open('random_false.txt', 'r') as filehandle3:
    for line3 in filehandle3:
        currentPlace3=line3[:-1]
        false_random.append(currentPlace3)

with open('random_true.txt', 'r') as filehandle4:
    for line4 in filehandle4:
        currentPlace4=line4[:-1]
        true_random.append(currentPlace4)
        
with open('knn_true.txt', 'r') as filehandle5:
    for line5 in filehandle5:
        currentPlace5=line5[:-1]
        true_knn.append(currentPlace5)
        
with open('knn_false.txt', 'r') as filehandle6:
    for line6 in filehandle6:
        currentPlace6=line6[:-1]
        false_knn.append(currentPlace6)
        
float_true_svm=[]
for i in true_svm:
    float_true_svm.append(float(i))  
float_false_svm=[]
for i in false_svm:
    float_false_svm.append(float(i)) 
float_true_knn=[]
for i in true_knn:
    float_true_knn.append(float(i))
float_false_knn=[]
for i in false_knn:
    float_false_knn.append(float(i))
float_true_random=[]
for i in true_random:
    float_true_random.append(float(i))
float_false_random=[]
for i in false_random:
    float_false_random.append(float(i))
        


def plot_roc_curve(false_positive_rate, true_positive_rate, float_true_svm, float_false_svm,  float_true_knn, float_false_knn, float_true_random, float_false_random, label=None):
    plt.plot(false_positive_rate, true_positive_rate,'r', linewidth=2, label='decision tree')
    plt.plot(float_false_svm, float_true_svm, 'y',linewidth=2, label='svm')
    plt.plot(float_false_knn, float_true_knn,'b', linewidth=2, label="knn")
    plt.plot(float_false_random, float_true_random,'g', linewidth=2, label="random forest")
    plt.legend()
    plt.plot([0, 1], [0, 1], 'r', linewidth=4)
    plt.axis([0, 1, 0, 1])
    plt.xlabel('False Positive Rate (FPR)', fontsize=16)
    plt.ylabel('True Positive Rate (TPR)', fontsize=16)

plt.figure(figsize=(14, 7))
plot_roc_curve(false_positive_rate, true_positive_rate, float_true_svm, float_false_svm, float_true_knn, float_false_knn, float_true_random, float_false_random)
plt.show()
